shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
runApp('shiny.R')
library(DataExplorer)
library(readr)
library(dplyr)
library(ggplot2)
library(DataExplorer)
custData <- read_csv("data.csv")
custData <- read_csv("/data.csv")
custData <- read_csv("/data.csv")
custData <- read_csv("data.csv")
custData <- read_csv("data.csv")
glimpse(custData)
dim(custData)
View(custData)
library(readr)
options(repr.plot.width=8, repr.plot.height=3)
# look for missing values using the DataExplorer package
plot_missing(custData)
custData <- na.omit(custData)
dim(custData)
options(repr.plot.width=8, repr.plot.height=3)
# look for missing values using the DataExplorer package
plot_missing(custData)
# separate date and time components of invoice date
custData$date <- sapply(custData$InvoiceDate, FUN = function(x) {strsplit(x, split = '[ ]')[[1]][1]})
custData$time <- sapply(custData$InvoiceDate, FUN = function(x) {strsplit(x, split = '[ ]')[[1]][2]})
View(custData)
# create month, year and hour of day variables
custData$month <- sapply(custData$date, FUN = function(x) {strsplit(x, split = '[/]')[[1]][1]})
custData$year <- sapply(custData$date, FUN = function(x) {strsplit(x, split = '[/]')[[1]][3]})
custData$hourOfDay <- sapply(custData$time, FUN = function(x) {strsplit(x, split = '[:]')[[1]][1]})
View(custData)
head(custData, n =5)
custData$date <- as.Date(custData$date, "%m/%d/%Y")
library(lubridate)
custData$dayOfWeek <- wday(custData$date, label=TRUE)
install.packages(lubridate)
install.packages('lubridate')
View(custData)
custData <- custData %>% mutate(lineTotal = Quantity * UnitPrice)
custData
custData <- custData %>% mutate(lineTotal = Quantity * UnitPrice)
View(custData)
library(readr)
library(dplyr)
library(ggplot2)
library(DataExplorer)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
custData <- custData %>% mutate(lineTotal = Quantity * UnitPrice)
View(custData)
custData$Country <- as.factor(custData$Country)
custData$month <- as.factor(custData$month)
custData$year <- as.factor(custData$year)
levels(custData$year) <- c(2010,2011)
custData$hourOfDay <- as.factor(custData$hourOfDay)
custData$dayOfWeek <- as.factor(custData$dayOfWeek)
options(repr.plot.width=8, repr.plot.height=3)
custData %>%
group_by(date) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = date, y = revenue)) + geom_line() + geom_smooth(method = 'auto', se = FALSE) + labs(x = 'Date', y = 'Revenue (£)', title = 'Revenue by Date')
library(readr)
library(dplyr)
library(ggplot2)
library(DataExplorer)
options(repr.plot.width=8, repr.plot.height=3)
custData %>%
group_by(date) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = date, y = revenue)) + geom_line() + geom_smooth(method = 'auto', se = FALSE) + labs(x = 'Date', y = 'Revenue (£)', title = 'Revenue by Date')
custData %>%
group_by(dayOfWeek) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = dayOfWeek, y = revenue)) + geom_col() + labs(x = 'Day of Week', y = 'Revenue (£)', title = 'Revenue by Day of Week')
weekdaySummary <- custData %>%
group_by(date, dayOfWeek) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup()
head(weekdaySummary, n = 10)
ggplot(weekdaySummary, aes(x = dayOfWeek, y = revenue)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Revenue', title = 'Revenue by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = transactions)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Number of Daily Transactions', title = 'Number of Transactions by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = aveOrdVal)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Average Order Value', title = 'Average Order Value by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = revenue)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Revenue', title = 'Revenue by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = revenue)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Revenue', title = 'Revenue by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = transactions)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Number of Daily Transactions', title = 'Number of Transactions by Day of the Week')
ggplot(weekdaySummary, aes(x = dayOfWeek, y = aveOrdVal)) + geom_boxplot() + labs(x = 'Day of the Week', y = 'Average Order Value', title = 'Average Order Value by Day of the Week')
ggplot(weekdaySummary, aes(transactions, fill = dayOfWeek)) + geom_density(alpha = 0.2)
kruskal.test(transactions ~ dayOfWeek, data = weekdaySummary)
library(agricolae)
install.packages("agricolae")
library(agricolae)
kruskal(weekdaySummary$transactions, weekdaySummary$dayOfWeek, console = TRUE)
custData %>%
group_by(hourOfDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = hourOfDay, y = revenue)) + geom_col() + labs(x = 'Hour Of Day', y = 'Revenue (£)', title = 'Revenue by Hour Of Day')
custData %>%
group_by(hourOfDay) %>%
summarise(transactions = n_distinct(InvoiceNo)) %>%
ggplot(aes(x = hourOfDay, y = transactions)) + geom_col() + labs(x = 'Hour Of Day', y = 'Number of Transactions', title = 'Transactions by Hour Of Day')
countrySummary <- custData %>%
group_by(Country) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup() %>%
arrange(desc(revenue))
head(countrySummary, n = 10)
unique(countrySummary$Country)
countryCustSummary <- custData %>%
group_by(Country) %>%
summarise(revenue = sum(lineTotal), customers = n_distinct(CustomerID)) %>%
mutate(aveCustVal = (round((revenue / customers),2))) %>%
ungroup() %>%
arrange(desc(revenue))
head(countryCustSummary, n = 10)
topFiveCountries <- custData %>%
filter(Country == 'Netherlands' | Country == 'EIRE' | Country == 'Germany' | Country == 'France' | Country == 'Australia')
topFiveCountries
topFiveCountrySummary <- topFiveCountries %>%
group_by(Country, date) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo), customers = n_distinct(CustomerID)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup() %>%
arrange(desc(revenue))
head(topFiveCountrySummary)
ggplot(topFiveCountrySummary, aes(x = Country, y = revenue)) + geom_col() + labs(x = ' Country', y = 'Revenue (£)', title = 'Revenue by Country')
ggplot(topFiveCountrySummary, aes(x = date, y = revenue, colour = Country)) + geom_smooth(method = 'auto', se = FALSE) + labs(x = ' Country', y = 'Revenue (£)', title = 'Revenue by Country over Time')
ggplot(topFiveCountrySummary, aes(x = Country, y = aveOrdVal)) + geom_boxplot() + labs(x = ' Country', y = 'Average Order Value (£)', title = 'Average Order Value by Country') + scale_y_log10()
ggplot(topFiveCountrySummary, aes(x = Country, y = transactions)) + geom_boxplot() + labs(x = ' Country', y = 'Transactions', title = 'Number of Daily Transactions by Country')
custSummary <- custData %>%
group_by(CustomerID) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup() %>%
arrange(desc(revenue))
head(custSummary, n = 10)
custSummary <- custData %>%
group_by(CustomerID) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup() %>%
arrange(desc(revenue))
head(custSummary, n = 10)
ggplot(custSummary, aes(revenue)) + geom_histogram(binwidth = 10) + labs(x = 'Revenue', y = 'Count of Customers', title = 'Histogram of Revenue per customer')
ggplot(custSummary, aes(revenue)) + geom_histogram() + scale_x_log10() + labs(x = 'Revenue', y = 'Count of Customers', title = 'Histogram of Revenue per customer (Log Scale)')
ggplot(custSummary, aes(transactions)) + geom_histogram() + scale_x_log10() + labs(x = 'Number of Transactions', y = 'Count of Customers', title = 'Histogram of Transactions per customer')
custSummaryB <- custData %>%
group_by(CustomerID, InvoiceNo) %>%
summarise(revenue = sum(lineTotal), transactions = n_distinct(InvoiceNo)) %>%
mutate(aveOrdVal = (round((revenue / transactions),2))) %>%
ungroup() %>%
arrange(revenue) %>%
mutate(cumsum=cumsum(revenue))
head(custSummaryB, n =10)
custData %>% filter(CustomerID == 16446)
custData %>% filter(CustomerID == 16446)
custData %>% filter(CustomerID == 16446)
custSummaryB <- custData %>%
group_by(InvoiceNo, CustomerID, Country, date, month, year, hourOfDay, dayOfWeek) %>%
summarise(orderVal = sum(lineTotal)) %>%
mutate(recent = Sys.Date() - date) %>%
ungroup()
custSummaryB$recent <- as.character(custSummaryB$recent)
custSummaryB$recentDays <- sapply(custSummaryB$recent, FUN = function(x) {strsplit(x, split = '[ ]')[[1]][1]})
custSummaryB$recentDays <- as.integer(custSummaryB$recentDays)
head(custSummaryB, n = 5)
customerBreakdown <- custSummaryB %>%
group_by(CustomerID, Country) %>%
summarise(orders = n_distinct(InvoiceNo), revenue = sum(orderVal), meanRevenue = round(mean(orderVal), 2), medianRevenue = median(orderVal),
mostDay = names(which.max(table(dayOfWeek))), mostHour = names(which.max(table(hourOfDay))),
recency = min(recentDays))%>%
ungroup()
head(customerBreakdown)
custBreakSum <- customerBreakdown %>%
filter(orders > 1, revenue > 50)
head(custBreakSum)
dim(custBreakSum)
library(heatmaply)
install.packages("heatmaply")
library(heatmaply)
custMat <- custBreakSum %>%
select(recency, revenue, meanRevenue, medianRevenue, orders) %>%
as.matrix()
rownames(custMat) <- custBreakSum$CustomerID
head(custMat)
class(custMat)
options(repr.plot.width=7, repr.plot.height=6)
heatmap(scale(custMat), cexCol = 0.7)
library(shiny); runApp('shiny.R')
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='test-kelompok8',
token='569C46A2389B8AA6E0537FDCC99EB35D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='test-kelompok8',
token='569C46A2389B8AA6E0537FDCC99EB35D',
secret='y9gd+dfTueop0VDMODop7m48V+awbfUt1h71Wez1')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('C:\Users\Asus\Downloads\Tugas ML\Dashboard\app.R')
library(rsconnect)
rsconnect::deployApp('C:\Users\Asus\Downloads\Tugas ML\Dashboard\app.R')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\Asus\\Downloads\\Tugas ML\\Dashboard\\app.R')
library(rsconnect)
rsconnect::deployApp('app.R')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\Asus\\Downloads\\Tugas ML\\Dashboard')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\Asus\\Downloads\\Tugas ML\\Dashboard')
View(customerBreakdown)
View(ui)
View(custData)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
